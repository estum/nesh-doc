// Generated by CoffeeScript 1.9.0
(function() {
  var crayon, intdoc, isFunction, lastTokenPlus, vm, __doc__,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  __doc__ = "Shows documentation for an expression; you can also type Ctrl-Q in-line";

  crayon = require('crayon-terminal');

  intdoc = require('intdoc');

  isFunction = require('lodash-node').isFunction;

  vm = require('vm');

  lastTokenPlus = function(input) {
    "A crude cut at figuring out where the last thing you want to\nevaluate in what you're typing is\n\nEx. If you are typing\n  myVal = new somemodule.SomeClass\n\nYou probably just want help on `somemodule.SomeClass`\n";
    var c, t, _i;
    t = "";
    if (input != null) {
      for (_i = input.length - 1; _i >= 0; _i += -1) {
        c = input[_i];
        if (__indexOf.call("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.[]'\"$_:", c) < 0) {
          break;
        }
        t = c + t;
      }
      if (t[0] === ".") {
        t = t.slice(1);
      }
      if (t.slice(-1) === ".") {
        t = t.slice(0, -1);
      }
    }
    return t;
  };

  exports.__doc__ = __doc__;

  exports.postStart = function(context) {
    var document, repl, __lastKeypressWasCtrlQ, _eval;
    repl = context.repl;
    _eval = function(expr) {
      var e;
      try {
        if (repl.useGlobal) {
          return vm.runInThisContext("(" + expr + ")");
        } else {
          return vm.runInContext("(" + expr + ")", repl.context);
        }
      } catch (_error) {
        e = _error;
        return void 0;
      }
    };
    document = function(expr, reportErrors, showCode) {
      var callbackParam, decallbacked, doc, e, handler, result, tyname, x, _ref, _ref1;
      if (expr.trim().length === 0) {
        if (reportErrors) {
          repl.outputStream.write(crayon.cyan(__doc__ + "\n"));
        }
      } else {
        repl.outputStream.write(crayon.yellow(expr + "\n"));
        try {
          if (repl.useGlobal) {
            result = vm.runInThisContext("(" + expr + ")");
          } else {
            result = vm.runInContext("(" + expr + ")", repl.context);
          }
        } catch (_error) {
          e = _error;
          if (reportErrors) {
            repl.outputStream.write(crayon.red("Bad input; can't document\n"));
          }
          repl.displayPrompt();
          return null;
        }
        doc = intdoc(result);
        decallbacked = doc.isFibrous || doc.isInstapromise;
        if (decallbacked) {
          callbackParam = doc.params.pop();
        }
        if (doc.name && doc.name.length > 0) {
          tyname = "[" + doc.type + ": " + doc.name + "]";
        } else {
          tyname = "[" + doc.type + "]";
        }
        repl.outputStream.write(crayon.cyan(tyname));
        if (typeof result === 'function' && (doc.params != null)) {
          repl.outputStream.write(crayon.yellow(" " + ((_ref = doc.name) != null ? _ref : crayon.gray((_ref1 = result != null ? result.name : void 0) != null ? _ref1 : '<Lambda>')) + "(" + (((function() {
            var _i, _len, _ref2, _results;
            _ref2 = doc.params;
            _results = [];
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              x = _ref2[_i];
              _results.push("" + x);
            }
            return _results;
          })()).join(", ")) + ")"));
          if (decallbacked) {
            if (doc.isFibrous) {
              handler = " by fibrous";
            } else if (doc.isInstapromise) {
              handler = " by instapromise";
            } else {
              handler = "";
            }
            repl.outputStream.write(crayon.yellow(" *" + callbackParam + " handled" + handler));
          }
        }
        repl.outputStream.write("\n");
        if ((doc.doc != null) && doc.doc.length > 0) {
          repl.outputStream.write(doc.doc + "\n");
        }
      }
      if (showCode) {
        if (doc) {
          if (doc.code != null) {
            repl.outputStream.write(crayon.green(doc.code + "\n"));
          } else {
            repl.outputStream.write(crayon.green(result + "\n"));
          }
        }
      }
      repl.displayPrompt();
      return doc;
    };
    repl.defineCommand('doc', {
      help: __doc__,
      action: function(expr) {
        return document(expr, true, true);
      }
    });
    __lastKeypressWasCtrlQ = false;
    return repl.inputStream.on('keypress', function(char, key) {
      var cp, input, leave, origPrompt, rli, toDoc, _ref;
      if (!(key && key.ctrl && !key.meta && !key.shift && key.name === 'q')) {
        leave = true;
      }
      if (leave) {
        return __lastKeypressWasCtrlQ = false;
      } else {
        rli = repl.rli;
        cp = rli.cursor;
        origPrompt = (_ref = repl._prompt) != null ? _ref : repl.prompt;
        input = rli.line;
        rli.output.write("\n");
        toDoc = lastTokenPlus(input);
        document(toDoc, false, __lastKeypressWasCtrlQ);
        rli.line = "";
        rli.write(input);
        return __lastKeypressWasCtrlQ = true;
      }
    });
  };

}).call(this);
